// --------------------- MAP DEEP - FUNCTIONS - UTILS ----------------------- //


// MAP DEEP GET - FUNCTIONS  -----------------------------------------------  //

/// Map deep get (nested maps)
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}


// MAP DEEP SET - FUNCTIONS  -----------------------------------------------  //

/// Deep set function to set a value in nested maps
/// @access public
/// @param {Map} $map - Map
/// @param {List} $keys -  Key chaine
/// @param {*} $value - Value to assign
/// @return {Map}

@function map-deep-set($map, $keys, $value) {
  $maps: ($map,);
  $result: null;

  @if (type-of(nth($keys, -1)) == "map") {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }

  @if (length($keys) == 1) {
    @return map-merge($map, ($keys: $value));
  }

  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if ($current-get == null) {
      @error "Key `#{$key}` doesn't exist at current level in map.";
    }
    $maps: append($maps, $current-get);
  }

  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }

  // Return result
  @return $result;
}
